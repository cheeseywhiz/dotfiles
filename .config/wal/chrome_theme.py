#!/usr/bin/env python3
"""Generate a theme for Chrome based on the palatte generated by wal."""
import json
import subprocess
import sys
from pywal.settings import CACHE_DIR
import collect
import tint

FILE = collect.path.Path(__file__)
IMAGE_MAP = tint.ImagePath(FILE.parent / 'theme_toolbar.png')
CACHE_DIR = collect.path.Path(CACHE_DIR)

log = collect.logging.getLogger()
log.name = FILE.split[0]
log.setLevel('INFO')


def call(*args, **Popen_kwargs):
    """Call the given command and exit if the command return a nonzero exit
    code."""
    proc = subprocess.Popen([*args], **Popen_kwargs)
    ret_code = proc.wait()

    if ret_code:
        sys.exit(ret_code)
    else:
        return proc


def wal_palatte():
    """Load the palatte generated by wal in hex and RGB form."""
    with (CACHE_DIR / 'colors.json').open() as file:
        hex_palatte = json.load(file)['colors']

    rgb_palatte = {name: tint.hex_to_rgb(color)
                   for name, color in hex_palatte.items()}
    return tuple(hex_palatte.values()), tuple(rgb_palatte.values())


def ntp_background():
    """Generate the blurred background image."""
    with (CACHE_DIR / 'wal').open() as file:
        wal_img = file.read()

    call('convert', wal_img, '-scale', '1366x768^', '-blur', '0x10',
         CACHE_DIR / 'wal_chrome/img/theme_ntp_background.jpg')


def toolbar(hex_palatte):
    """Generate the toolbar image based on color0."""
    IMAGE_MAP.tint(
        hex_palatte[0], CACHE_DIR / 'wal_chrome/img/theme_toolbar.png')


def frame(hex_palatte):
    """Generate the frame image based on color1."""
    IMAGE_MAP.tint(
        hex_palatte[1], CACHE_DIR / 'wal_chrome/img/theme_frame.png')


def manifest(rgb_palatte):
    """Generate the dict structure for the manifest.json theme file."""
    return {
        'manifest_version': 2,
        'name': 'wal_chrome',
        'version': '1.0',
        'theme': {
            'images': {
                'theme_ntp_background': 'img/theme_ntp_background.jpg',
                'theme_toolbar': 'img/theme_toolbar.png',
                'theme_frame': 'img/theme_frame.png',
            },
            'colors': {
                'tab_text': rgb_palatte[7],
                'tab_background_text': rgb_palatte[8],
                'bookmark_text': rgb_palatte[7],
                'ntp_background': rgb_palatte[0],
                'ntp_text': rgb_palatte[7],
            },
            'properties': {
                'ntp_background_repeat': 'no-repeat',
                'ntp_background_alignment': 'middle middle',
                'ntp_logo_alternate': 0,
            }, }, }


def main():
    hex_palatte, rgb_palatte = wal_palatte()
    ntp_background()
    toolbar(hex_palatte)
    frame(hex_palatte)

    with (CACHE_DIR / 'wal_chrome/manifest.json').open('w') as file:
        json.dump(manifest(rgb_palatte), file)

    log.info('Made chrome theme')


if __name__ == '__main__':
    main()
